using CodingDay.Models.Users;
using CodingDay.Services.Users;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CodingDay.Controllers
{
    [Route("public/[controller]")]
    public class UserController : Controller
    {
        private readonly UserService _userService;
        public UserController(UserService userService)
        {
            _userService = userService;
        }

        // We return all existing users as a list of UserDTO's
        [HttpGet]
        public IActionResult GetAllUsers()
        {
            return Ok(_userService.GetAllUsers()
                        .Select(user => new UserDto(user)).ToList());
        }

        // Implement me: GET /public/users/{id}
        // Expected output: a user object containing all fields in the database (id, first_name, last_name, email)
        //                  OR HttpStatus.NOT_FOUND if no user with the requested id exists
        [HttpGet("{id}")]
        public IActionResult GetUser(int id)
        {
            UserDto userDto = null;

            if(userDto == null)
            {
                // not found
                return NotFound();
            }
            else
            {
                //return the user here
                return Ok();
            }
        }

        // Implement me: POST /public/users
        // Expected input: first_name, last_name, email (the ID is generated by the database)
        // We can re-use the UserDTO here for the request body
        //    [HttpPost]
        //    public void createUser([FromBody]UserDTO newUser) {
        //        userService.createUser(...
        //    }

    }
}
